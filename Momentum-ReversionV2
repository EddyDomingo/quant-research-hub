# Momentum Trend Algorithm

import yfinance as yf
import pandas as pd
import warnings
warnings.filterwarnings('ignore')

def compute_rsi(series, period=14):
    delta = series.diff()
    gain = delta.clip(lower=0).rolling(window=period).mean()
    loss = -delta.clip(upper=0).rolling(window=period).mean()
    rs = gain / loss
    return 100 - (100 / (1 + rs))

def compute_macd(series, short=12, long=26, signal=9):
    ema_short = series.ewm(span=short, adjust=False).mean()
    ema_long = series.ewm(span=long, adjust=False).mean()
    macd_line = ema_short - ema_long
    signal_line = macd_line.ewm(span=signal, adjust=False).mean()
    return macd_line, signal_line

# ----- SELECT DATA SOURCE -----

source = 'sp500'  # options: 'sp500', 'nasdaq', 'dowjones'

if source == 'sp500':
    tickers = pd.read_html("https://en.wikipedia.org/wiki/List_of_S%26P_500_companies", header=0)[0]['Symbol']
elif source == 'nasdaq':
    tickers = pd.read_html("https://en.wikipedia.org/wiki/Nasdaq-100", header=0)[4]['Ticker']
elif source == 'dowjones':
    tickers = pd.read_html("https://en.wikipedia.org/wiki/Dow_Jones_Industrial_Average", header=0)[2]['Symbol']
else:
    raise ValueError("Invalid source. Choose 'sp500', 'nasdaq', or 'dowjones'.")

tickers = [t.replace('.', '-') for t in tickers]

# --------------------------------

# Download 7 months of price data
data = yf.download(tickers, period="7mo", interval="1d", auto_adjust=True)['Close']
data = data.dropna(axis=1, thresh=100)

# 50-day moving average
dma_50 = data.rolling(window=50).mean()
latest_price = data.iloc[-1]
latest_dma = dma_50.iloc[-1]
above_dma_tickers = latest_price[latest_price > latest_dma].index
data = data[above_dma_tickers]

# RSI filter (exclude overbought)
rsi_values = {}
for ticker in data.columns:
    rsi = compute_rsi(data[ticker])
    rsi_values[ticker] = rsi.iloc[-1]
rsi_series = pd.Series(rsi_values)
filtered_data = data[rsi_series[rsi_series <= 70].index]

# Filter MACD bullish crossover
macd_positive = []
for ticker in filtered_data.columns:
    macd_line, signal_line = compute_macd(filtered_data[ticker])
    if macd_line.iloc[-1] > signal_line.iloc[-1]:
        macd_positive.append(ticker)

# Keep only those with MACD crossover
filtered_data = filtered_data[macd_positive]

# Calculate 6-month returns
returns = ((filtered_data.iloc[-1] / filtered_data.iloc[0]) - 1).sort_values(ascending=False)
top_returns = returns.head(5).reset_index()
top_returns.columns = ['Ticker', '6M Return']
top_returns['6M Return'] = (top_returns['6M Return'] * 100).round(2)

# Print top 5 performers
print("Top 5 Stocks by 6-Month Return:\n")
print(f"{'Ticker':<10}{'6M Return (%)':>15}")
print("-" * 25)
for _, row in top_returns.iterrows():
    print(f"{row['Ticker']:<10}{row['6M Return']:>15.2f}")

# ---- Allocation section ----
capital = 10000
top3 = top_returns.head(3)
allocation_per_stock = capital / 3

# Get latest price and 3-month average volume
latest_prices = yf.download(list(top3['Ticker']), period="1d")['Close'].iloc[-1]
volume_data = yf.download(list(top3['Ticker']), period="3mo", interval="1d")['Volume']
avg_volume = volume_data.mean().round(0).astype(int)

# Build allocation table
alloc_rows = []

for t in top3['Ticker']:
    try:
        price = round(latest_prices[t], 2)
        volume = avg_volume[t]
        shares = int(allocation_per_stock // price)
        invested = round(shares * price, 2)

        alloc_rows.append({
            'Ticker': t,
            'Price': price,
            'Avg Volume': volume,
            'Shares': shares,
            'Invested': invested
        })
    except KeyError:
        print(f"Skipping {t}: missing price or volume data.")

alloc_df = pd.DataFrame(alloc_rows)

# Add total row
alloc_df.loc[len(alloc_df)] = ['Total', '', '', '', round(alloc_df['Invested'].sum(), 2)]

# Print final allocation table
print("\nMomentum Trend\n")
print("Suggested Allocation of $10,000:\n")
print(f"{'Ticker':<10}{'Price':>10}{'Avg Volume':>15}{'Shares':>10}{'Invested':>12}")
print("-" * 62)

for _, row in alloc_df.iterrows():
    if row['Ticker'] == 'Total':
        print(f"{row['Ticker']:<10}{'':>10}{'':>15}{'':>10}{row['Invested']:>12.2f}")
    else:
        print(f"{row['Ticker']:<10}{row['Price']:>10.2f}{int(row['Avg Volume']):>15,}{row['Shares']:>10}{row['Invested']:>12.2f}")

